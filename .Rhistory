list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
debug()
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- funtion(solve) i <<- solve
getinverse <- funtion() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
debug(makeCacheMatrix)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- funtion(solve) i <<- solve
getinverse <- funtion() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setmean <- function(solve) i <<- solve
getmean <- function() i
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- solve
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- solve
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
makeVector <- function(x = numeric()) { #x = numeric() specifies an empty numeric vector
m <- NULL                           # this creates an empty object
set <- function(y) {                # this creates a function called 'set' with single argument 'y'
x <<- y                         #x is now assigned the variable y but in the parent environment
m <<- NULL                      #m is assigned a NULL in the parent environment
}
get <- function() x                 # this produces the function 'get' that calls x
setmean <- function(mean) m <<- mean#the function 'setmean' calls 'mean' and produces m where m is created in paretn function environment
getmean <- function() m             # the function 'getmean' calls m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(x = c(1:10))
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean()
x <- makeVector(x = c(1:10))
x
cachemean(x)
cachemean <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- solve
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
cachemean <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
rnorm(1:100, 2,3)
str(rnorm)
str(mean)
str(rpois)
str(ppois)
rbinom(100, 1, 0.5)
rbinom(100, 2, 0.5)
letters
Rupdate()
?rnorm
test <- rnorm(p, mean = 1, sd = 2, log.p = TRUE)
test <- rnorm(p, mean = 1, sd = 2, log = TRUE)
library(stats)
test <- rnorm(p, mean = 1, sd = 2, log = TRUE)
test <- rnorm(p, n= 250, mean = 1, sd = 2, log = TRUE)
test <- rnorm(p, n= 250, mean = 1, sd = 2, p.log = TRUE)
test <- rnorm( n= 250, mean = 1, sd = 2, p.log = TRUE)
test <- rnorm( n= 250, mean = 1, sd = 2)
test <- pnorm( n= 250, mean = 1, sd = 2)
test <- pnorm(n= 250, mean = 1, sd = 2)
?pnorm
test <- pnorm(q, n= 250, mean = 1, sd = 2)
test <- pnorm(q, mean = 1, sd = 2)
test <- rnorm(n=250, mean = 1.5, sd = 0.75)
with(test, plot)
P <- rnorm(n=250, mean = 0.01, sd = 0.01)
OR <- rnorm(n=250, mean = 1.5, sd = 0.75)
data <- data.frame(cbind(OR, P))
with(data, plot(OR, P))
with(data, plot(OR, P))
with(data, plot(P, OR))
P <- rnorm(n=250, mean = 0.001, sd = 0.01)
data <- data.frame(cbind(OR, P))
with(data, plot(P, OR))
P <- rnorm(n=250, mean = 0.001, sd = 0.001)
data <- data.frame(cbind(OR, P))
with(data, plot(P, OR))
order(data)
?order
OR <- rnorm(n=250, mean = 1.5, sd = 0.75)
P <- rnorm(n=250, mean = 0.001, sd = 0.001)
data <- data.frame(cbind(OR, P))
data <- data[order(OR, P),]
with(data, plot(P, OR))
data <- unique(data[order(OR, P),])
with(data, plot(P, OR))
data <- data.frame(cbind(OR, P))
data <- unique(data[order(OR, P),])
?unique
data <- data.frame(cbind(OR, P))
View(data)
data <- data[order(OR, P),]
View(data)
data <- data[order(P),]
with(data, plot(P, Or))
with(data, plot(P, OR))
?plot
P <-  unique(rnorm(n=250, mean = 0.001, sd = 0.0001))
data <- data.frame(cbind(OR, P))
data <- data[order(P),]
with(data, plot(P, OR))
data1 <- data[order(OR),]
with(data1, plot(P, OR))
with(data, plot(P, OR))
with(data1, plot(P, OR))
OR <- rnorm(n=250, mean = 1.5, sd = 0.75)
P <-  unique(rnorm(n=250, mean = 0.001, sd = 0.0001))
data <- data.frame(cbind(OR, P))
with(data, plot(P, OR))
abline(h = 2)
abline(h = 2, color = "blue")
abline(h = 2, col = "blue")
abline(h = 2, col = "blue")
abline(v = 0.001, col = 'red')
with(data, plot(P, OR, log = 'y'))
?dnorm
data1 <- dnorm(mean = 1, sd = 0.25, loge = TRUE)
data1 <- dnorm(mean = 1, sd = 0.25, log = TRUE)
data1 <- dnorm(x = c(1:100), mean = 1, sd = 0.25, log = TRUE)
OR1 <- dnorm(x = c(1:100), mean = 1, sd = 0.25, log = TRUE)
OR1 <- dnorm(x = c(1:250), mean = 1, sd = 0.25, log = TRUE)
data1 <- data.frame(cbind(OR1, P))
with(data1, plot(P, OR, log = 'y'))
with(data1, plot(P, OR1, log = 'y'))
with(data1, plot(P, OR1))
with(data, plot(P, OR, log = 'y'))
abline(h = 2, col = "blue")
abline(v = 0.001, col = 'red')
?plot
with(data, plot(P, OR, log = 'y', type = 'h'))
with(data, plot(P, OR,  type = 'h'))
abline(h = 2, col = "blue")
abline(v = 0.001, col = 'red')
with(data, plot(P, OR, log = 'y', type = 'o'))
with(data, plot(P, OR, log = 'y', type = 's'))
with(data, plot(P, OR, log = 'y', type = 'S'))
with(data, plot(P, OR, log = 'y', type = 'b'))
with(data, plot(P, OR, log = 'y', type = 'h'))
OR <- rnorm(n=250, mean = 3, sd = 0.75)
P <-  unique(rnorm(n=250, mean = 0.001, sd = 0.0001))
data <- data.frame(cbind(OR, P))
data1 <- data.frame(cbind(OR1, P))
with(data, plot(P, OR, log = 'y', type = 'h'))
OR <- rnorm(n=250, mean = 2, sd = 0.75)
P <-  unique(rnorm(n=250, mean = 0.001, sd = 0.0001))
data <- data.frame(cbind(OR, P))
data1 <- data.frame(cbind(OR1, P))
with(data, plot(P, OR, log = 'y', type = 'h'))
abline(h = 2, col = "blue")
abline(v = 0.001, col = 'red')
data <- data[order(OR), ]
with(data, plot(P, OR, log = 'y', type = 'h'))
abline(h = 2, col = "blue")
abline(v = 0.001, col = 'red')
OR <- rnorm(n=250, mean = 2, sd = 1)
P <-  unique(rnorm(n=250, mean = 0.001, sd = 0.0001))
data <- data.frame(cbind(OR, P))
data <- data[order(OR), ]
data1 <- data.frame(cbind(OR1, P))
with(data, plot(P, OR, log = 'y', type = 'h'))
abline(h = 2, col = "blue")
abline(v = 0.001, col = 'red')
library(stats)
OR <- rnorm(n=250, mean = 2, sd = 1)
P <-  unique(rnorm(n=250, mean = 0.001, sd = 0.0001))
data <- data.frame(cbind(OR, P))
data <- data[order(OR), ]
View(data)
with(data, plot(OR, P))
with(data, plot(OR, P), type = 'h')
with(data, plot(OR, P), type = 'h')
with(data, plot(P, OR, log = 'y', type = 'h'))
with(data, plot(OR, P), type = 'h'))
with(data, plot(OR, P, type = 'h'))
?as.vector
P<= 0.0001
P <=0.05
P <= 0.001
PCut <- P <= 0.001
RR <- rnorm(n=250, mean = 2, sd = 1)
P <-  unique(rnorm(n=250, mean = 0.001, sd = 0.0001))
PCut <- P <= 0.001
data <- data.frame(cbind(RR, P, PCut))
data <- data[order(RR), ]
?plot
levels(PCut)
PCut <- as.factor(P <= 0.001)
levels(PCut)
with(data, plot(RR, RR, type = 'h', col = PCut))
RR <- abs(rnorm(n=250, mean = 2, sd = 1))
P <-  unique(rnorm(n=250, mean = 0.001, sd = 0.0001))
PCut <- as.factor(P <= 0.001)
levels(PCut)
data <- data.frame(cbind(RR, P, PCut))
data <- data[order(RR), ]
with(data, plot(RR, RR, type = 'h', col = PCut))
with(data, plot(RR, RR, type = 'h', log = TRUE, col = PCut))
?plot
with(data, plot(RR, RR, type = 'h', y = 'log', col = PCut))
with(data, plot(RR, RR, type = 'h', y = 'log', x = 'log', col = PCut))
with(data, plot(RR, RR, type = 'h',log = 'x', log = 'y', col = PCut))
with(data, plot(RR, RR, type = 'h', log = 'y', col = PCut))
with(data, plot(RR, RR, type = 'h', col = PCut))
RR <- abs(rnorm(n=100, mean = 2, sd = 1))
P <-  unique(rnorm(n=100, mean = 0.001, sd = 0.0001))
PCut <- as.factor(P <= 0.001)
levels(PCut)
data <- data.frame(cbind(RR, P, PCut))
data <- data[order(RR), ]
with(data, plot(RR, RR, type = 'h', col = PCut))
with(data, barplot(RR))
with(data, barplot(RR, col = PCut))
with(data, barplot(RR, col = PCut, ylab= 'Risk Ratio'))
with(data, barplot(RR, col = PCut, ylab= 'Risk Ratio', lg = 'y'))
with(data, barplot(RR, col = PCut, ylab= 'Risk Ratio', log = 'y'))
with(data, barplot(log(RR), col = PCut, ylab= 'Risk Ratio', ))
with(data, barplot(log(RR), col = PCut, log = 'y', ylab= 'Risk Ratio', ))
with(data, barplot(RR, col = PCut, log = 'y', ylab= 'Risk Ratio', ))
with(data, barplot(RR, col = PCut, ylab= 'Risk Ratio'))
legend(col= PCut)
legend("topleft", pch = 1, col =  "red", legend = "P < 0.001")
with(data, barplot(RR, col = PCut, ylab= 'Risk Ratio'))
legend("topleft", pch = 2, col =  "red", legend = "P < 0.001")
with(data, barplot(RR, col = PCut, ylab= 'Risk Ratio'))
legend("topleft", pch = 3, col =  "red", legend = "P < 0.001")
?col
?pch
with(data, barplot(RR, col = PCut, ylab= 'Risk Ratio'))
legend("topleft", pch = 15, col =  "red", legend = "P < 0.001")
RR <- abs(rnorm(n=50, mean = 2, sd = 1))
P <-  unique(rnorm(n=50 , mean = 0.001, sd = 0.0001))
PCut <- as.factor(P <= 0.001)
levels(PCut)
data <- data.frame(cbind(RR, P, PCut))
data <- data[order(RR), ]
with(data, barplot(RR, col = PCut, ylab= 'Risk Ratio'))
legend("topleft", pch = 15, col =  "red", legend = "P < 0.001")
?as.character
?repeat
??repeat
Domain <- as.character(rep(c("Demographic", "Material Capital", "Human Capital", "Social Capital", "Health Condition"), each = 5))
Domain <- as.character(rep(c("Demographic", "Material Capital", "Human Capital", "Social Capital", "Health Condition"), each = 10))
levels(PCut)
data <- data[order(RR), ]
par(mfrow(c(2,2)))
par(mfrow = c(2,2))
par(mfrow = c(2,2))
with(data, barplot(RR, Domain == "Demographic", col = PCut, ylab= 'Risk Ratio'))
with(data, barplot(RR, Domain == "Material Capital", col = PCut, ylab= 'Risk Ratio'))
with(data, barplot(RR, Domain == "Human Capital", col = PCut, ylab= 'Risk Ratio'))
with(data, barplot(RR, Domain == "Health COndition", col = PCut, ylab= 'Risk Ratio'))
with(data, barplot(RR, Domain == "Health Cndition", col = PCut, ylab= 'Risk Ratio'))
with(data, barplot(RR, Domain == "Health Condition", col = PCut, ylab= 'Risk Ratio'))
par(mfrow = c(2,2))
with(data, barplot(RR, Domain == "Demographic", col = PCut, ylab= 'Risk Ratio'))
with(data, barplot(RR, Domain == "Material Capital", col = PCut, ylab= 'Risk Ratio'))
with(data, barplot(RR, Domain == "Human Capital", col = PCut, ylab= 'Risk Ratio'))
with(data, barplot(RR, Domain == "Health Condition", col = PCut, ylab= 'Risk Ratio'))
legend("topleft", pch = 15, col =  "red", legend = "P < 0.001")
legend("top", pch = 15, col =  "red", legend = "P < 0.001")
legend("toptop", pch = 15, col =  "red", legend = "P < 0.001")
legend( pch = 15, col =  "red", legend = "P < 0.001")
legend(x = c(4,4), pch = 15, col =  "red", legend = "P < 0.001")
par(mfrow = c(2,2))
legend(x = c(4,4), pch = 15, col =  "red", legend = "P < 0.001")
with(data, barplot(type = 'n'))
with(data, barplot(RR, type = 'n'))
data[(Domain == 'Demographic,),]
data[(Domain == 'Demographic,), ]
data[(Domain == 'Demographic,), ]
print(data[(Domain == 'Demographic,), ])
print(data[(Domain == 'Demographic,), ])
print(data[(Domain == 'Demographic',), ])
print(data[(Domain == 'Demographic',), ])
print(data[(Domain == 'Demographic'), ])
par(mfrow = c(2,2))
with(data[(Domain == 'Demographic'), ], barplot(RR, col = PCut, ylab= 'Risk Ratio'))
with(data[(Domain == 'Material Capital'),], barplot(RR, col = PCut, ylab= 'Risk Ratio'))
with(data[(Domain == 'Social Capital'),], barplot(RR,col = PCut, ylab= 'Risk Ratio'))
with(data[(Domain == 'Health Condition'),], barplot(RR, col = PCut, ylab= 'Risk Ratio'))
par(mfrow = c(2,2))
with(data[(Domain == 'Demographic'), ], barplot(RR, col = PCut, ylab= 'Risk Ratio', main = 'Demographic'))
with(data[(Domain == 'Material Capital'),], barplot(RR, col = PCut, ylab= 'Risk Ratio', main = 'Material Capital'))
with(data[(Domain == 'Social Capital'),], barplot(RR,col = PCut, ylab= 'Risk Ratio', main = 'Social Capital'))
with(data[(Domain == 'Health Condition'),], barplot(RR, col = PCut, ylab= 'Risk Ratio', main = 'Health Condition'))
legend(x = c(4,4), pch = 15, col =  "red", legend = "P < 0.001")
legend(x = c(0,0), pch = 15, col =  "red", legend = "P < 0.001")
legend(x = c(1,1), pch = 15, col =  "red", legend = "P < 0.001")
par(mfrow = c(2,2))
legend(x = c(1,1), pch = 15, col =  "red", legend = "P < 0.001")
with(data[(Domain == 'Demographic'), ], barplot(RR, col = PCut, ylab= 'Risk Ratio', main = 'Demographic'))
legend(x = c(1,1), pch = 15, col =  "red", legend = "P < 0.001")
legend(x = c(0,0), pch = 15, col =  "red", legend = "P < 0.001")
legend("topleft", pch = 15, col =  "red", legend = "P < 0.001")
par(mfrow = c(2,2))
with(data[(Domain == 'Demographic'), ], barplot(RR, col = PCut, ylab= 'Risk Ratio', main = 'Demographic'))
legend("topleft", pch = 15, col =  "red", legend = "P < 0.001")
with(data[(Domain == 'Material Capital'),], barplot(RR, col = PCut, ylab= 'Risk Ratio', main = 'Material Capital'))
with(data[(Domain == 'Social Capital'),], barplot(RR,col = PCut, ylab= 'Risk Ratio', main = 'Social Capital'))
with(data[(Domain == 'Health Condition'),], barplot(RR, col = PCut, ylab= 'Risk Ratio', main = 'Health Condition'))
library(dplyr)
setwd("C:/Users/jkempke/Box Sync/Coursera/Storm-Data")
storm <- read.csv("./StormData.csv.bz2", stringsAsFactors = FALSE)
storm$BGN_DATE <- as.POSIXct(strptime(storm$BGN_DATE, format = "%m/%d/%Y %X"))
storm$EVTYPE <- as.factor(storm$EVTYPE)
deaths <- group_by(storm, EVTYPE)
summarise(deaths, TotalDeath = sum(FATALITIES), TotalInjury = sum(INJURIES))
storm <- group_by(storm, EVTYPE)
human_impact <- summarise(storm, TotalDeath = sum(FATALITIES), TotalInjury = sum(INJURIES))
human_impact <- summarise(storm, TotalDeath = sum(FATALITIES), TotalInjury = sum(INJURIES), TotalImpact = sum(TotalDeath, TotalInjury))
View(human_impact)
humna_impact <- arrange(human_impact, desc(TotalDeaths))
humna_impact <- arrange(human_impact, desc(TotalDeath))
human_impact <- arrange(human_impact, desc(TotalDeath))
View(human_impact)
storm <- mutate(storm, year = BGN_DATE$year)
storm <- read.csv("./StormData.csv.bz2", stringsAsFactors = FALSE)
storm <- mutate(storm, year = BGN_DATE$year)
storm <- mutate(storm, BGN_DATE = as.POSIXlt(strptime(storm$BGN_DATE, format = "%m/%d/%Y %X")))
storm$BGN_DATE <- as.POSIXlt(strptime(storm$BGN_DATE, format = "%m/%d/%Y %X"))
storm <- mutate(storm, year = BGN_DATE$year)
storm <- mutate(storm, year = BGN_DATE$year + 1900)
storm <- mutate(storm, year = BGN_DATE$year + 1900)
storm <- mutate(storm, year = (BGN_DATE$year + 1900))
View(storm)
storm <- mutate(storm, year = BGN_DATE$year + 1900)
storm <- mutate(storm, year = year + 1900)
storm$EVTYPE <- as.factor(storm$EVTYPE)
levels(storm$EVTYPE)
storm <- group_by(storm, year, EVTYPE)
storm$BGN_DATE <- as.POSIXct(storm$BGN_DATE)
storm$EVTYPE <- as.factor(storm$EVTYPE)
storm <- group_by(storm, year, EVTYPE)
storm <- group_by(storm, EVTYPE)
human_impact <- summarise(storm, TotalDeath = sum(FATALITIES), TotalInjury = sum(INJURIES), TotalImpact = sum(TotalDeath, TotalInjury))
human_impact <- filter(human_impact, TotalImpact > 0)
with(human_impact, barplot(TotalDeaths)
)
with(human_impact, barplot(TotalDeath))
human_impact <- arrange(human_impact, desc(TotalImpact, TotalDeath))
View(human_impact)
with(human_impact, barplot(TotalDeath))
View(head(human_impact))
?head
View(head(human_impact, n = 25))
nrow(human_impact)
nrow(human_impact)/4
nrow(human_impact)/5
nrow(human_impact)/10
View(head(human_impact, n = nrow(human_impact)/5))
with(head(human_impact, n = nrow(human_impact)/5)), barplot(TotalImpact)
with(head(human_impact, n = nrow(human_impact)/5), barplot(TotalImpact))
?barplot
with(head(human_impact, n = nrow(human_impact)/5), barplot(TotalImpact, names.arg = EVTYPE))
library(ggplot2)
ggplot(human_impact, aes(x=EVTYPE, y = TotalImpact)) + geom_bar()
?geom_bar
ggplot(human_impact, aes(x=EVTYPE, y = TotalImpact, stat = "identity")) + geom_bar()
ggplot(human_impact, aes(x=EVTYPE, y = TotalImpact)) + geom_bar(stat = "identity")
ggplot(head(human_impact, n = nrow(human_impact)/5), aes(x=EVTYPE, y = TotalImpact)) + geom_bar(stat = "identity")
ggplot(head(human_impact, n = nrow(human_impact)/10), aes(x=EVTYPE, y = TotalImpact)) + geom_bar(stat = "identity")
ggplot(head(human_impact, n = nrow(human_impact)/20), aes(x=EVTYPE, y = TotalImpact)) + geom_bar(stat = "identity")
ggplot(head(human_impact, n = nrow(human_impact)/30), aes(x=EVTYPE, y = TotalImpact)) +
geom_bar(stat = "identity")
ggplot(head(human_impact, n = nrow(human_impact)/30), aes(x=EVTYPE, y = TotalImpact)) +
geom_bar(stat = "identity") +
xlab("Event Type") +
ylab("Total Number of Human Impact Events (Injuries + Deaths")+
ggtitle("Human Impact of US Storms 1950-2011")
ggplot(head(human_impact, n = nrow(human_impact)/30), aes(x=EVTYPE, y = TotalImpact)) +
geom_bar(stat = "identity") +
xlab("Event Type") +
ylab("Total Number of Human Injuries + Deaths")+
ggtitle("Human Impact of US Storms 1950-2011")
ggplot(head(human_impact, n = nrow(human_impact)/30), aes(x=EVTYPE, y = TotalImpact)) +
geom_bar(stat = "identity") +
xlab("Event Type") +
ylab("Total Number of Human Injuries + Deaths")+
ggtitle("Sums of the Human Impact of US Storms by Storm Type, 1950-2011")
summary(storm$PROPDMGEXP )
table(storm$PROPDMGEXP )
table(storm$CROPDMGEXP)
table(is.na(storm$PROPDMGEXP))
table(is.na(storm$CROPDMGEXP))
economic_impact <- mutate(storm, if(PROPDMGEXP == "K"){propfactor = 1000}
else if (PROPDMGEXP == "k"){propfactor = 1000}
else if (PROPDMGEXP == "B"){propfactor = 1000000000}
else if (PROPDMGEXP == "M"){propfactor = 1000000}
else if (PROPDMGEXP == "m"){propfactor = 1000000}
else {propfactor = NA})
economic_impact <- mutate(storm, if(PROPDMGEXP == "K"){prop_damage = 1000 * PROPDMG}
else if (PROPDMGEXP == "k"){prop_damage = 1000 * PROPDMG}
else if (PROPDMGEXP == "B"){prop_damage = 1000000000 * PROPDMG}
else if (PROPDMGEXP == "M"){prop_damage = 1000000 * PROPDMG}
else if (PROPDMGEXP == "m"){prop_damage = 1000000 * PROPDMG}
else {prop_damage = NA})
economic_impact <- mutate(storm, if(PROPDMGEXP = "K"){prop_damage = 1000 * PROPDMG}
else if (PROPDMGEXP = "k"){prop_damage = 1000 * PROPDMG}
else if (PROPDMGEXP = "B"){prop_damage = 1000000000 * PROPDMG}
else if (PROPDMGEXP = "M"){prop_damage = 1000000 * PROPDMG}
else if (PROPDMGEXP = "m"){prop_damage = 1000000 * PROPDMG}
else {prop_damage = NA})
economic_impact <- mutate(storm, prop_damage = if(PROPDMGEXP == "K"){prop_damage = 1000 * PROPDMG}
else if (PROPDMGEXP == "k"){prop_damage = 1000 * PROPDMG}
else if (PROPDMGEXP == "B"){prop_damage = 1000000000 * PROPDMG}
else if (PROPDMGEXP == "M"){prop_damage = 1000000 * PROPDMG}
else if (PROPDMGEXP == "m"){prop_damage = 1000000 * PROPDMG}
else {prop_damage = NA})
economic_impact <- mutate(storm, prop_damage = ifelse(PROPDMGEXP == "K", 1000 * PROPDMG))
?ifelse
economic_impact <-  mutate(storm, prop_damage = if(PROPDMGEXP == "K") 1000 * PROPDMG)
economic_impact <- with(storm, if(PROPDMGEXP == "K") prop_damage <- 1000 * PROPDMG)
economic_impact <- with(storm, if(PROPDMGEXP == "K") {prop_damage <- 1000 * PROPDMG})
remove(economic_impact)
economic_impact <- mutate(storm, if(PROPDMGEXP == "K") {prop_damage <- 1000 * PROPDMG})
economic_impact <- mutate(storm, prop_damage = if(PROPDMGEXP == "K") {prop_damage <- 1000 * PROPDMG})
economic_impact <- mutate(storm, prop_damage = if(PROPDMGEXP == "K") {1000 * PROPDMG})
economic_impact <- mutate(storm, prop_damage = if(PROPDMGEXP == "K") 1000 * PROPDMG)
economic_impact <- mutate(storm, prop_damage = if(PROPDMGEXP == "K"), 1000 * PROPDMG)
economic_impact <- mutate(storm, prop_damage = if(PROPDMGEXP == "K"), 1000)
economic_impact <- mutate(storm, prop_damage = if(PROPDMGEXP == "K") 1000)
economic_impact <- group_by(storm, as.factor(PROPDMGEXP))
as.factor(storm$PROPDMGEXP)
levels(as.factor(storm$PROPDMGEXP))
economic_impact <- mutate(storm, prop_exp = as.factor(PROPDMGEXP), crop_exp = as.factor(CROPDMGEXP))
